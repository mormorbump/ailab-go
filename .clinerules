## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub
から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

# AI Coding with Go: ベストプラクティス

これは Go と AI を駆使してコードを書く際の使い方についてまとめた資料。人間が読む以外に、コーディングエージェントがプロンプトとして読むことを想定する。

本プロジェクトでは、

- スクリプトモード
- テストファーストモード
- モジュールモード

複数のモードを想定する。以下に解説する。


# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)
- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### ドメイン駆動設計 (DDD)
- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)
- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

```go
// カスタム型で型安全性を確保
type Money float64
type Email string

// バリデーション用メソッド
func (m Money) IsValid() bool {
    return m >= 0
}

func (e Email) IsValid() bool {
    // メールアドレスの検証ロジック
    return strings.Contains(string(e), "@")
}
```

### 値オブジェクト

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を持つ

```go
// 作成関数はバリデーション付き
func NewMoney(amount float64) (Money, error) {
    if amount < 0 {
        return 0, errors.New("負の金額不可")
    }
    return Money(amount), nil
}
```

### エンティティ

- IDに基づく同一性
- 制御された更新
- 整合性ルールを持つ

### Result型

```go
// Result型の実装
type Result[T any, E any] struct {
    value T
    err   E
    isOk  bool
}

// 成功の結果を作成
func Ok[T any, E any](value T) Result[T, E] {
    return Result[T, E]{
        value: value,
        isOk:  true,
    }
}

// エラーの結果を作成
func Err[T any, E any](err E) Result[T, E] {
    return Result[T, E]{
        err:  err,
        isOk: false,
    }
}

// 結果値の取得
func (r Result[T, E]) Value() (T, bool) {
    return r.value, r.isOk
}

// エラー値の取得
func (r Result[T, E]) Error() (E, bool) {
    return r.err, !r.isOk
}
```

- 成功/失敗を明示
- 早期リターンパターンを使用
- エラー型を定義

### リポジトリ

- ドメインモデルのみを扱う
- 永続化の詳細を隠蔽
- テスト用のインメモリ実装を提供

### アダプターパターン

- 外部依存を抽象化
- インターフェースは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
   - まず型を定義
   - ドメインの言語を型で表現

2. **純粋関数から実装**
   - 外部依存のない関数を先に
   - テストを先に書く

3. **副作用を分離**
   - IO操作は関数の境界に押し出す
   - 副作用を持つ処理をインターフェースで抽象化

4. **アダプター実装**
   - 外部サービスやDBへのアクセスを抽象化
   - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 関数優先（構造体は必要な場合のみ）
- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算

# Go Practice

## モジュールを追加する

モジュールを追加するとき、 go.mod にすでに require されていないか確認する。

一般によく知られているモジュール以外をコードに追加するときは、ハルシネーションをしていないか確認する。

モジュールが見つかった場合、 `go get -tool <name>` で go.mod に追加し、各ファイルでimport して使う。

## テストの書き方

`testify`パッケージを使用

```go
package calculator

import (
	"testing"
	"github.com/stretchr/testify/assert"
)

func TestAddition(t *testing.T) {
	// テスト対象の関数を実行
	result := Add(2, 3)
	
	// 期待値の検証 (testifyを使用)
	assert.Equal(t, 5, result, "数値の合計が期待値と一致すること")
}
```

### テストの基本原則

- テストファイルは `_test.go` のサフィックスをつける
- `testify/assert` または `testify/require` パッケージを利用する
- テスト関数は必ず `Test` から始まる名前にする
- テスト関数は `t *testing.T` パラメータを受け取る
- 複雑な入れ子構造は避け、`t.Run()` を使用して平坦な構造にする

### アサーションの書き方

```go
// 等値比較
assert.Equal(t, expected, actual, "期待値と一致すること")

// 真偽値の検証
assert.True(t, condition, "条件が真であること")

// nilチェック
assert.Nil(t, object, "オブジェクトがnilであること")
assert.NotNil(t, object, "オブジェクトがnilでないこと")
```

必ず失敗時のメッセージを含めて、何をテストしているかを明確にする

### サブテストを使った例

```go
func TestCalculator(t *testing.T) {
	t.Run("Addition", func(t *testing.T) {
		result := Add(2, 3)
		assert.Equal(t, 5, result, "2+3の計算結果が5になること")
	})
	
	t.Run("Subtraction", func(t *testing.T) {
		result := Subtract(5, 2)
		assert.Equal(t, 3, result, "5-2の計算結果が3になること")
	})
}
```

### テーブル駆動テストの基本

```go
package calculator

import (
	"testing"
	"github.com/stretchr/testify/assert"
)

func TestAdd(t *testing.T) {
	// テストケースのテーブル定義 - データの部分
	tests := []struct {
		name     string
		a        int
		b        int
		expected int
	}{
		{name: "正の数同士", a: 2, b: 3, expected: 5},
		{name: "正と負の数", a: 2, b: -3, expected: -1},
		{name: "負の数同士", a: -2, b: -3, expected: -5},
		{name: "ゼロを含む", a: 0, b: 5, expected: 5},
	}

	// テストロジックの部分 - 各テストケースを実行
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Add(tt.a, tt.b)
			assert.Equal(t, tt.expected, result, "計算結果が期待値と一致すること")
		})
	}
}
```

### データとロジックの分離

テーブル駆動テストの核心は「**データとロジックの分離**」：

1. **テーブル部分（データ）**: 
   - 入力パラメータと期待される出力のみに集中
   - 実装の詳細ではなく、外部から見た振る舞いをテスト

2. **テスト部分（ロジック）**: 
   - テストの実行方法は一箇所にまとめる
   - 全てのテストケースに対して同じロジックを適用

### テーブルの設計ポイント

効果的なテーブル設計のために重要な2つの観点：

1. **適切なテストケース数**:
   - 少なすぎると網羅性に欠ける
   - 多すぎると可読性が低下
   - 境界値、エッジケース、通常ケースを含める
   - 目安として5〜10ケース程度が読みやすい

2. **入出力への集中**:
   - テーブルには入力と期待される出力のみを含める
   - テスト中の中間状態や内部実装の詳細は含めない
   - 「何を入れたら何が出るか」という観点でテストケースを設計

### 実践例

```go
func TestCalculate(t *testing.T) {
	// データとしてのテストケース - 入力と出力のみに集中
	tests := []struct {
		name        string  // テストケースの名前
		expression  string  // 入力
		expected    float64 // 期待される出力
		expectError bool    // エラーが予想されるか
	}{
		{name: "基本的な加算", expression: "2+3", expected: 5, expectError: false},
		{name: "複雑な式", expression: "2*3+4", expected: 10, expectError: false},
		{name: "ゼロ除算", expression: "5/0", expected: 0, expectError: true},
		{name: "空の式", expression: "", expected: 0, expectError: true},
		{name: "不正な文字", expression: "2+a", expected: 0, expectError: true},
	}

	// ロジックとしてのテスト実行部分
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result, err := Calculate(tt.expression)
			
			// エラー期待値のチェック
			if tt.expectError {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, tt.expected, result)
			}
		})
	}
}
```

#### テーブル駆動テストの利点

- コードの重複を減らす
- テストケースの追加が容易
- 異なるインプットでの挙動を一目で確認できる
- メンテナンス性が高い
- データとロジックが分離されているため、テストの意図が明確

適切なテーブル設計と入出力への集中を意識することで、読みやすく保守性の高いテストを実現できます。これはGoの標準的なテスト手法として広く採用されています。


## Goパッケージ構造のベストプラクティス


### 依存関係の管理

1. **パッケージ設計**:
   - より小さく、集中したパッケージに分割
   - 依存方向を上位レベル（アプリケーション）から下位レベル（ユーティリティ）に向ける
   - 依存性逆転の原則を使用して、インターフェースを介した疎結合を実現

3. **依存関係可視化ツール**:
   - `go mod graph` - モジュール依存関係の表示
   - `go mod why` - なぜ特定の依存関係が必要なのかを表示
   - サードパーティツール：
     ```bash
     go get -tool github.com/loov/goda@latest
     goda graph ./...
     ```

## Go特有のベストプラクティス

2. **依存関係の検証ツール**:
   - `go vet` - 潜在的な問題をチェック
   - `golangci-lint` - 複数のリンターを統合
   ```bash
   golangci-lint run --enable=depguard,gomoddirectives
   ```

3. **インターフェース設計**:
   - インターフェースは実装側ではなく使用側のパッケージで定義
   - これにより依存方向を制御し循環参照を防ぐ

4. **依存性注入**:
   - コードの依存関係をより明示的に、テスト可能に
   - `wire`や`fx`などのDIフレームワークを活用


## Goにおけるコード品質の監視

### カバレッジ

Goでのテストカバレッジの取得は次のように行う：

```bash
go test -coverprofile=coverage.out ./...
go tool cover -html=coverage.out -o coverage.html
```

上記コマンドで、HTML形式のカバレッジレポートが生成され、ブラウザで詳細を確認できる。

カバレッジの目標値：
- 新規実装時は80%以上のカバレッジを目標とする
- 重要なビジネスロジックは90%以上を目指す

## デッドコード解析

Goでのデッドコード検出には以下のツールが利用する：

```bash
# deadcode検出
go get -tool golang.org/x/tools/cmd/deadcode@latest
deadcode ./...

# 未使用の依存関係検出
go mod tidy

# より高度な静的解析
go get -tool honnef.co/go/tools/cmd/staticcheck@latest
staticcheck ./...
```

継続的インテグレーションで以下のようなコマンドを実行するよう設定：

```bash
# CIでのデッドコード検出
go vet ./...
staticcheck ./...
```

これまでのコマンドは、全てMakefileで実行可能

## Go

Goでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 Struct による実装を避けて関数を優先する
- 副作用(DBや外部APIへの書き込み)を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する


###  型の使用方針

####  1. 明確な型定義

1. インターフェース型と具体的な型の適切な使用
   - `interface{}`（Goの`any`相当）の使用を避ける
   - 型アサーションやリフレクションを最小限にする
   - 可能な場合はジェネリクスを活用する

```go
// Good - 具体的な型を使用
func ProcessItems(items []string) []string {
    // 処理
    return processedItems
}

// Bad - interface{}を不必要に使用
func ProcessItems(items []interface{}) []interface{} {
    // 処理
    return processedItems
}

// Good - 必要ならジェネリクスを利用
func ProcessItems[T any](items []T) []T {
    // 処理
    return processedItems
}
```

2. 型の明示化
   - 関数の戻り値の型を明示する
   - 変数宣言時に適切な型を指定する

```go
// Good - 戻り値の型を明示
func GetUserCount() int {
    return len(users)
}

// Bad - 暗黙的な型
func GetUserCount() {
    return len(users) // 型情報が不明確
}
```

#### 2. カスタム型の命名と活用

1. 型エイリアスとカスタム型の命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   - 固有の振る舞いが必要な場合は構造体よりも基本型に対するカスタム型を優先する

```go
// Good - 意味のある型名
type UserID string
type Email string

type User struct {
    ID        UserID   `json:"id"`
    Email     Email    `json:"email"`
    CreatedAt time.Time `json:"created_at"`
}

// Bad - 汎用的すぎる型名
type Data interface{}
type Info struct {
    // 様々なフィールド
}
```

2. カスタム型にメソッドを追加して意味を強化

```go
// 型に振る舞いを追加
type UserID string

func (id UserID) Validate() bool {
    return len(id) > 0
}

// 使用例
func ProcessUser(id UserID) error {
    if !id.Validate() {
        return errors.New("invalid user ID")
    }
    // 処理を続行
    return nil
}
```

3. 空の構造体や定数のための型の活用

```go
// イベントタイプの列挙
type EventType string

const (
    EventTypeCreated EventType = "created"
    EventTypeUpdated EventType = "updated"
    EventTypeDeleted EventType = "deleted"
)

// 使用例
func HandleEvent(eventType EventType, data []byte) {
    switch eventType {
    case EventTypeCreated:
        // 作成イベントの処理
    case EventTypeUpdated:
        // 更新イベントの処理
    case EventTypeDeleted:
        // 削除イベントの処理
    default:
        log.Printf("unknown event type: %s", eventType)
    }
}
```

### エラー処理

1. エラーのラッピングとスタック情報
   ```go
    import "github.com/pkg/errors"

    func fetchData() error {
        resp, err := http.Get(url)
        if err != nil {
            return errors.Wrap(err, "failed to fetch data")
        }
        // ...
    }

    // 呼び出し側
    func process() error {
        if err := fetchData(); err != nil {
            return errors.Wrap(err, "processing failed")
        }
        // ...
    }
   ```

2. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

```go
// エラータイプを定義
type ErrorType string

const (
    ErrorTypeNetwork     ErrorType = "network"
    ErrorTypeNotFound    ErrorType = "notFound"
    ErrorTypeUnauthorized ErrorType = "unauthorized"
)

// カスタムエラー構造体
type APIError struct {
    Type    ErrorType
    Message string
}

// Error メソッドの実装でエラーインターフェースを満たす
func (e APIError) Error() string {
    return fmt.Sprintf("%s: %s", e.Type, e.Message)
}

// エラータイプを確認するヘルパー関数
func IsNotFoundError(err error) bool {
    var apiErr APIError
    if errors.As(err, &apiErr) {
        return apiErr.Type == ErrorTypeNotFound
    }
    return false
}
```

### 実装パターン

#### 1. 関数ベース（状態を持たない場合）

```go
// インターフェース
type Logger interface {
    Log(message string)
}

// 実装（関数型を使った実装）
type LoggerFunc func(message string)

// インターフェースを満たすためのメソッド
func (f LoggerFunc) Log(message string) {
    f(message)
}

// ロガーの作成関数
func NewLogger() Logger {
    return LoggerFunc(func(message string) {
        fmt.Printf("[%s] %s\n", time.Now().Format(time.RFC3339), message)
    })
}

// 利用例
func main() {
    logger := NewLogger()
    logger.Log("Hello, world!")
}
```

#### 2. 構造体ベース（状態を持つ場合）

```go
// インターフェース
type Cache[T any] interface {
    Get(key string) (T, bool)
    Set(key string, value T)
}

// 実装（構造体を使用）
type TimeBasedCache[T any] struct {
    items map[string]cacheItem[T]
    ttl   time.Duration
}

type cacheItem[T any] struct {
    value    T
    expireAt time.Time
}

// コンストラクタ
func NewTimeBasedCache[T any](ttl time.Duration) *TimeBasedCache[T] {
    return &TimeBasedCache[T]{
        items: make(map[string]cacheItem[T]),
        ttl:   ttl,
    }
}

// Getメソッドの実装
func (c *TimeBasedCache[T]) Get(key string) (T, bool) {
    item, exists := c.items[key]
    if !exists || time.Now().After(item.expireAt) {
        var zero T
        return zero, false
    }
    return item.value, true
}

// Setメソッドの実装
func (c *TimeBasedCache[T]) Set(key string, value T) {
    c.items[key] = cacheItem[T]{
        value:    value,
        expireAt: time.Now().Add(c.ttl),
    }
}

// 利用例
func main() {
    cache := NewTimeBasedCache[string](5 * time.Minute)
    cache.Set("key1", "value1")
    
    value, found := cache.Get("key1")
    if found {
        fmt.Println("Found:", value)
    }
}
```

## 3. アダプターパターン（外部依存の抽象化）

```go
// 結果を表す型
type Result[T any, E any] struct {
    value T
    err   E
    isOk  bool
}

// 成功の結果を作成
func Ok[T any, E any](value T) Result[T, E] {
    return Result[T, E]{
        value: value,
        isOk:  true,
    }
}

// エラーの結果を作成
func Err[T any, E any](err E) Result[T, E] {
    return Result[T, E]{
        err:  err,
        isOk: false,
    }
}

// 結果値の取得
func (r Result[T, E]) Value() (T, bool) {
    return r.value, r.isOk
}

// エラー値の取得
func (r Result[T, E]) Error() (E, bool) {
    return r.err, !r.isOk
}

// APIエラー型
type APIError struct {
    Type    string `json:"type"`
    Message string `json:"message"`
}

// Fetcher型。Fetch APIが実装された関数を返却する
type Fetcher func(path string) ([]byte, error)

// API取得関数の作成
func NewFetcher(headers map[string]string) Fetcher {
    client := &http.Client{Timeout: 10 * time.Second}
    
    return func(path string) ([]byte, error) {
        req, err := http.NewRequest("GET", path, nil)
        if err != nil {
            return nil, &APIError{
                Type:    "network",
                Message: err.Error(),
            }
        }
        
        // ヘッダーの設定
        for key, value := range headers {
            req.Header.Set(key, value)
        }
        
        resp, err := client.Do(req)
        if err != nil {
            return nil, &APIError{
                Type:    "network",
                Message: err.Error(),
            }
        }
        defer resp.Body.Close()
        
        if resp.StatusCode != http.StatusOK {
            return nil, &APIError{
                Type:    "network",
                Message: fmt.Sprintf("HTTP error: %d", resp.StatusCode),
            }
        }
        
        return io.ReadAll(resp.Body)
    }
}

// User型
type User struct {
    ID    string `json:"id"`
    Name  string `json:"name"`
    Email string `json:"email"`
}

// APIクライアント
type APIClient struct {
    fetcher Fetcher
    baseURL string
}

// APIクライアント作成
func NewAPIClient(fetcher Fetcher, baseURL string) *APIClient {
    return &APIClient{
        fetcher: fetcher,
        baseURL: baseURL,
    }
}

// ユーザー取得メソッド。中でフィールドにあるFetcherを利用
func (c *APIClient) GetUser(id string) (User, error) {
    data, err := c.fetcher(fmt.Sprintf("%s/users/%s", c.baseURL, id))
    if err != nil {
        return User{}, err
    }
    
    var user User
    if err := json.Unmarshal(data, &user); err != nil {
        return User{}, &APIError{
            Type:    "network",
            Message: "Failed to parse response",
        }
    }
    
    return user, nil
}

// 使用例
func main() {
    headers := map[string]string{
        "Content-Type": "application/json",
        "X-API-Key":    "my-api-key",
    }
    
    fetcher := NewFetcher(headers)
    client := NewAPIClient(fetcher, "https://api.example.com")
    
    user, err := client.GetUser("123")
    if err != nil {
        var apiErr *APIError
        if errors.As(err, &apiErr) {
            fmt.Printf("API Error: %s - %s\n", apiErr.Type, apiErr.Message)
        } else {
            fmt.Printf("Unknown error: %v\n", err)
        }
        return
    }
    
    fmt.Printf("User: %+v\n", user)
}
```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける

# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は以下のサイクルで進める開発手法です：

1. **Red**: まず失敗するテストを書く
2. **Green**: テストが通るように最小限の実装をする
3. **Refactor**: コードをリファクタリングして改善する

## 重要な考え方

- **テストは仕様である**: テストコードは実装の仕様を表現したもの
- **Assert-Act-Arrange の順序で考える**:
  1. まず期待する結果（アサーション）を定義
  2. 次に操作（テスト対象の処理）を定義
  3. 最後に準備（テスト環境のセットアップ）を定義
- **テスト名は「状況→操作→結果」の形式で記述**: 例:
  「有効なトークンの場合にユーザー情報を取得すると成功すること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用します：

1. **静的解析・型チェック**:
   - `go vet <package>`
   - `golangci-lint run`

2. **デッドコード検出・削除**:
   - `go get -tool golang.org/x/tools/cmd/deadcode@latest`
   - `deadcode ./...`

3. **コードカバレッジ測定**:
   - `go test -coverprofile=coverage.out ./...`
   - `go tool cover -html=coverage.out -o coverage.html`

4. **Gitによるバージョン管理**:
   - 各フェーズ（テスト作成→実装→リファクタリング）の完了時にコミット
   - タスク完了時にはユーザーに確認：
     ```bash
     git status  # 変更状態を確認
     git add <関連ファイル>
     git commit -m "<適切なコミットメッセージ>"
     ```
   - コミットメッセージはプレフィックスを使用：
     - `test:` - テストの追加・修正
     - `feat:` - 新機能の実装
     - `refactor:` - リファクタリング

## 詳細情報

Go環境におけるTDDの詳細な実践方法、例、各種ツールの活用方法については、以下のファイルを参照してください：

```
.cline/roomodes/go-tdd.md
```

このファイルにはテストファーストモードの詳細な手順、テストの命名規約、リファクタリングのベストプラクティスなどが含まれています。

このプロジェクトには以下のモードが定義されています:
- go-module Go:Module at .cline/roomodes/go-module.md
- go-refactor Go:RefactorMode at .cline/roomodes/go-refactor.md
- go-script Go:ScriptMode at .cline/roomodes/go-script.md
- go-tdd Go:TestFirstMode at .cline/roomodes/go-tdd.md
- kazuki-writer kazuki:writer at .cline/roomodes/kazuki-writer.md
- library-searcher LibraryResearcher at .cline/roomodes/library-searcher.md